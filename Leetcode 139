class Solution {
public:
    
//     -------------without set------------
//     bool wordBreaksol(string s,string sol,vector<string>& wordDict){
//          if(s.size()==0){
//              // cout<<sol;
//             return true;
//         }
//         for(int i=1;i<=s.size();i++){
//             string str=s.substr(0,i);
//             for(int j=0;j<wordDict.size();j++){
//                 if(str==wordDict[j]){
//                     if(wordBreaksol(s.substr(i),sol+str,wordDict)){
//                         return true;
//                     }
//                 }
                
//             }
//         }
//         return false;
//     }
    
//     bool wordBreak(string s, vector<string>& wordDict) {
//        return wordBreaksol(s,"",wordDict);
        
//     }
    
    
    //-------------------with set-------------------
        bool wordBreaksol(string S,int s,int e, unordered_set<string> wordDict,vector<int> &dp){
         if(s>e){
            return true;
        }
            if(dp[s]!=-1){
                return dp[s]==1;
            }
            for(int i=s;i<=e;i++){
                if(wordDict.find(S.substr(s,i-s+1)) != wordDict.end()){
                    if(wordBreaksol(S,i+1,e,wordDict,dp)){
                        dp[s]=1;
                        return true;
                    }
                }
            }
            dp[s]=0;
        return false;
    }
    
    bool wordBreak(string s, vector<string>& wordDict) {
         unordered_set<string> set(wordDict.begin(), wordDict.end());
        vector<int> dp(s.size(),-1);
       return wordBreaksol(s,0,s.size()-1,set,dp);
    }
};
