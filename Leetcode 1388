class Solution {
public:
     int rob_(vector<int> &nums,int s,int e,int slicenum,vector<vector<int>> &dp){
          if(s>e || slicenum==0){
              return 0;
          }
          if(dp[s][slicenum]!=-1){
              return dp[s][slicenum];
          }
          int incl=nums[s]+rob_(nums,s+2,e,slicenum-1,dp);
          int nonincl=rob_(nums,s+1,e,slicenum,dp);
          return dp[s][slicenum]=max(incl,nonincl);
      }
    
    int maxSizeSlices(vector<int>& nums) {
          int n=nums.size();
          vector<vector<int>> dp1(n,vector<int>((n/3)+1,-1));
        vector<vector<int>> dp2(n,vector<int..>((n/3)+1,-1));
         return max(rob_(nums,0,n-2,n/3,dp1),rob_(nums,1,n-1,n/3,dp2));
        // return max(nums[0]+rob_(nums,2,n-2,(n/3)-1,dp1),rob_(nums,1,n-1,n/3,dp2));
    }
};
