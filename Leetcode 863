  void kDistanceNode(TreeNode* root,int k,vector<int> & ans,TreeNode* block){
        if(root==NULL || k<0 || root==block){
            return;
        }
        if(k==0){
            ans.push_back(root->val);
            return;
        }
        kDistanceNode(root->left,k-1,ans,block);
        kDistanceNode(root->right,k-1,ans,block);
        return;
    }
    
    int distanceK_(TreeNode* root,TreeNode* target,int k,vector<int> &ans){
        if(root==NULL){
            return -1;
        }
        
        if(target==root){
            kDistanceNode(root,k,ans,NULL);
            return 1;
        }
        
        int l=distanceK_(root->left,target,k,ans);
        if(l!=-1){
            kDistanceNode(root,k-l,ans,root->left);
            return l+1;
        }
        int r=distanceK_(root->right,target,k,ans);
        if(r!=-1){
            kDistanceNode(root,k-r,ans,root->right);
            return r+1;
        }
        return -1;
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<int> ans;
        int i=distanceK_(root,target,k,ans);
        return ans;
    }
